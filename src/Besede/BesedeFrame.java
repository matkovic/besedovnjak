
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Besede;


import java.util.*;
import java.io.*;
import javax.swing.JOptionPane;
/**
 *
 * @author matW7
 */
public class BesedeFrame extends javax.swing.JFrame {

    /**
     * Creates new form BesedeFrame
     */
    public BesedeFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        panelMain = new javax.swing.JPanel();
        panelButtons = new javax.swing.JPanel();
        buttonSearch = new javax.swing.JButton();
        buttonDictionary = new javax.swing.JButton();
        labelStatus = new javax.swing.JLabel();
        panelOutput = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaResults = new javax.swing.JTextArea();
        panelInputs = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaIn = new javax.swing.JTextArea();
        panelSettings = new javax.swing.JPanel();
        checkBoxSquare = new javax.swing.JCheckBox();
        labelMin = new javax.swing.JLabel();
        spinnerMin = new javax.swing.JSpinner();
        labelMax = new javax.swing.JLabel();
        spinnerMax = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(550, 300));

        panelMain.setLayout(new java.awt.BorderLayout(13, 13));

        panelButtons.setLayout(new java.awt.GridLayout(2, 0));

        buttonSearch.setText("Search");
        buttonSearch.setEnabled(false);
        buttonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchActionPerformed(evt);
            }
        });
        panelButtons.add(buttonSearch);

        buttonDictionary.setText("Set dictionary");
        buttonDictionary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDictionaryActionPerformed(evt);
            }
        });
        panelButtons.add(buttonDictionary);
        panelButtons.add(labelStatus);

        panelMain.add(panelButtons, java.awt.BorderLayout.PAGE_END);

        panelOutput.setLayout(new javax.swing.BoxLayout(panelOutput, javax.swing.BoxLayout.LINE_AXIS));

        textAreaResults.setEditable(false);
        textAreaResults.setColumns(20);
        textAreaResults.setRows(5);
        textAreaResults.setFocusable(false);
        jScrollPane1.setViewportView(textAreaResults);

        panelOutput.add(jScrollPane1);

        panelMain.add(panelOutput, java.awt.BorderLayout.LINE_END);

        panelInputs.setLayout(new java.awt.BorderLayout());

        textAreaIn.setColumns(20);
        textAreaIn.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        textAreaIn.setRows(5);
        jScrollPane2.setViewportView(textAreaIn);

        panelInputs.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        checkBoxSquare.setSelected(true);
        checkBoxSquare.setText("4x4 square");
        panelSettings.add(checkBoxSquare);

        labelMin.setText("Min:");
        panelSettings.add(labelMin);

        spinnerMin.setModel(new javax.swing.SpinnerNumberModel(4, 3, 10, 1));
        panelSettings.add(spinnerMin);

        labelMax.setText("Max:");
        panelSettings.add(labelMax);

        spinnerMax.setModel(new javax.swing.SpinnerNumberModel(8, 3, 10, 1));
        panelSettings.add(spinnerMax);

        panelInputs.add(panelSettings, java.awt.BorderLayout.PAGE_END);

        panelMain.add(panelInputs, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelMain, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //the game characters
    char[][] theGame;
    //length to look in dictionary: from - to
    int lengthFrom = 4;
    int lengthTo = 10;

    //possible words in dictionary
    List<String> list;
    //possible words in the game
    List<String> possibleWords;
    
    File file;//
    
    

    private int checkInputColumns(String input) {
        //count max columns
        int countCols = 0;
        Scanner scanner = new Scanner(input);
        String line;
        while (scanner.hasNextLine()) {
            line = scanner.nextLine();
            int thisCols = line.length();

            if (countCols == 0) countCols = thisCols; //first time
            else if (countCols != thisCols) {
                return -1;
            }
        }
        scanner.close();

        return countCols;
    }
    
    private void writeToArray(String input) {
        //change values in charArray
        Scanner scanner = new Scanner(input);
        String line;
        int i = 0;
        while (scanner.hasNextLine()) {
            line = scanner.nextLine();
            theGame[i] = line.toCharArray();
            i++;
        }
        scanner.close();
    }
    
    private void buttonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchActionPerformed
        
        textAreaResults.setText("");
        possibleWords = new ArrayList<String>();
        
        lengthFrom=(int)spinnerMin.getValue();
        lengthTo=(int)spinnerMax.getValue();
        
        int maxCols = checkInputColumns(textAreaIn.getText());
        if(maxCols<=0){
            JOptionPane.showMessageDialog(null, "Check columns (number of columns must be the same in all rows).", "Warning", JOptionPane.OK_OPTION);
            return;
        }
        
        if(checkBoxSquare.isSelected() && maxCols==4 && textAreaIn.getLineCount()==4){
            theGame = new char[textAreaIn.getLineCount()][maxCols];//initialize 2d array
            writeToArray(textAreaIn.getText()); //write to theGame=2d array
        }
        else if(!checkBoxSquare.isSelected()){
            theGame = new char[textAreaIn.getLineCount()][maxCols];//initialize 2d array
            writeToArray(textAreaIn.getText()); //write to theGame=2d array
        }
        else{
            JOptionPane.showMessageDialog(null, "Must be 4x4", "Warning", JOptionPane.OK_OPTION);
            return;
        }

        
        
        labelStatus.setText("Working");
        list = new ArrayList<String>();
        
        Scanner scan;

        //number of different chars in the game
        int numberOfChars=0;

        //all posible characters in the game
        List<Character> possibleChars = new ArrayList<Character>();
        for(int i=0;i<theGame.length;i++) {
                for(int j=0;j<theGame[i].length;j++) {
                        if(!possibleChars.contains(theGame[i][j])){
                                numberOfChars++;
                        }
                        possibleChars.add(theGame[i][j]);
                }
        }

        //count all possible character in the game
        HashMap<Character, Integer> numbersOfChars = new HashMap<Character, Integer>();
        for(int i=0;i<theGame.length;i++) {
                for(int j=0;j<theGame[i].length;j++) {		
                        if(!numbersOfChars.containsKey(theGame[i][j])){
                                numbersOfChars.put(theGame[i][j], 1);
                        }
                        else{
                                numbersOfChars.put(theGame[i][j],  numbersOfChars.get(theGame[i][j])+1);
                        }
                }
        }


        try {
                //loop through every word in dictionary (file)
                scan = new Scanner(file, "UTF-8");
                while(scan.hasNext()) {
                        String word = scan.next();
                        boolean putIn=true; //put in list - possible word
                        //check if all characters are possible
                        for(int charr=0; charr<word.length(); charr++) {
                                if(!possibleChars.contains(word.charAt(charr))) {
                                        putIn=false;
                                        break;
                                }
                        }

                        //check if count of number is possible
                        if(putIn==true) {
                                HashMap<Character, Integer> numbersOfCharsWord = new HashMap<Character,Integer>();
                                OUT:
                                for(int i=0;i<word.length();i++) {
                                        if(!numbersOfCharsWord.containsKey(word.charAt(i))){
                                                numbersOfCharsWord.put(word.charAt(i), 1);
                                        }
                                        else{
                                                numbersOfCharsWord.put(word.charAt(i),  numbersOfCharsWord.get(word.charAt(i))+1);
                                                if(numbersOfCharsWord.get(word.charAt(i)) > numbersOfChars.get(word.charAt(i))){
                                                        putIn=false;
                                                        break OUT;
                                                }
                                        }
                                }
                        }


                        if(putIn==true) {
                                if(word.length() <= lengthTo && word.length() >= lengthFrom && !list.contains(word)){
                                        list.add(word);
                                }					
                        }
                }
        } catch(Exception e) {
                System.out.println(e);
        }

        Thread t1 = new Thread(new Runnable(){
            public void run(){
                for(int i=0;i<theGame.length;i++) {
                    for(int j=0;j<theGame[i].length;j++) {
                            List<int[]> uporabljene = new ArrayList<int[]>();
                            findRecursion(i,j,"", uporabljene);
                    }
                }
                labelStatus.setText("Finished");
            }
        });
        t1.start();
	
        
    }//GEN-LAST:event_buttonSearchActionPerformed

    private void buttonDictionaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDictionaryActionPerformed
            int returnVal = fileChooser.showOpenDialog(BesedeFrame.this);

            if (returnVal == fileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile();
                buttonSearch.setEnabled(true);
            } else {
                
            }
    }//GEN-LAST:event_buttonDictionaryActionPerformed

    public void findRecursion(int i, int j, String beseda, List<int[]> uporabljene) {
            if(i>=theGame.length || j>=theGame[0].length || i<0 || j<0 || beseda.length()>=lengthTo) {
                    return;
            }

            for(int[] tabb : uporabljene) {
                    if(tabb[0]==i && tabb[1]==j) {
                            return;
                    }
            }

            int[] tabe = {i,j};

            List<int[]> uporabljene1 = new ArrayList<int[]>();
            for(int[] tabb : uporabljene) {
                    uporabljene1.add(tabb);
            }
            uporabljene1.add(tabe);

            beseda=beseda+theGame[i][j];

            //System.out.println(beseda);

            if(list.contains(beseda)) {
                    if(!possibleWords.contains(beseda)){
                            if(beseda.length()>=lengthFrom)
                                    //System.out.println(beseda);
                                    textAreaResults.append(beseda + '\n');
                                    possibleWords.add(beseda);
                    }
            }

            findRecursion(i+1, j, beseda,uporabljene1);
            findRecursion(i, j+1, beseda,uporabljene1);
            findRecursion(i+1, j+1, beseda, uporabljene1);
            findRecursion(i-1, j, beseda, uporabljene1);
            findRecursion(i, j-1, beseda, uporabljene1);
            findRecursion(i-1, j-1, beseda, uporabljene1);
            findRecursion(i-1, j+1, beseda, uporabljene1);
            findRecursion(i+1, j-1, beseda, uporabljene1);

    }    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BesedeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BesedeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BesedeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BesedeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BesedeFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDictionary;
    private javax.swing.JButton buttonSearch;
    private javax.swing.JCheckBox checkBoxSquare;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelMax;
    private javax.swing.JLabel labelMin;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JPanel panelButtons;
    private javax.swing.JPanel panelInputs;
    private javax.swing.JPanel panelMain;
    private javax.swing.JPanel panelOutput;
    private javax.swing.JPanel panelSettings;
    private javax.swing.JSpinner spinnerMax;
    private javax.swing.JSpinner spinnerMin;
    private javax.swing.JTextArea textAreaIn;
    private javax.swing.JTextArea textAreaResults;
    // End of variables declaration//GEN-END:variables
}
